/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@grunt-name: 'grunt';
@grunt-x: 462px;
@grunt-y: 0px;
@grunt-offset-x: -462px;
@grunt-offset-y: 0px;
@grunt-width: 400px;
@grunt-height: 400px;
@grunt-total-width: 1094px;
@grunt-total-height: 512px;
@grunt-image: 'E:\study\webpack5-starter\asset\assets\sprite.png';
@grunt: 462px 0px -462px 0px 400px 400px 1094px 512px 'E:\study\webpack5-starter\asset\assets\sprite.png' 'grunt';
@gulp-name: 'gulp';
@gulp-x: 862px;
@gulp-y: 0px;
@gulp-offset-x: -862px;
@gulp-offset-y: 0px;
@gulp-width: 232px;
@gulp-height: 512px;
@gulp-total-width: 1094px;
@gulp-total-height: 512px;
@gulp-image: 'E:\study\webpack5-starter\asset\assets\sprite.png';
@gulp: 862px 0px -862px 0px 232px 512px 1094px 512px 'E:\study\webpack5-starter\asset\assets\sprite.png' 'gulp';
@webpack-name: 'webpack';
@webpack-x: 0px;
@webpack-y: 0px;
@webpack-offset-x: 0px;
@webpack-offset-y: 0px;
@webpack-width: 462px;
@webpack-height: 512px;
@webpack-total-width: 1094px;
@webpack-total-height: 512px;
@webpack-image: 'E:\study\webpack5-starter\asset\assets\sprite.png';
@webpack: 0px 0px 0px 0px 462px 512px 1094px 512px 'E:\study\webpack5-starter\asset\assets\sprite.png' 'webpack';
@spritesheet-width: 1094px;
@spritesheet-height: 512px;
@spritesheet-image: 'E:\study\webpack5-starter\asset\assets\sprite.png';
@spritesheet-sprites: @grunt @gulp @webpack;
@spritesheet: 1094px 512px 'E:\study\webpack5-starter\asset\assets\sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  background-image: e(%('url(%a)', e(@sprite-image)));
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
